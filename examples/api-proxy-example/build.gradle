plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.20"
    id "net.ltgt.apt-idea" version "0.20"
}

version "0.1"
group "example"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dl.bintray.com/micronaut/core-releases-local" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.0.4'
    }
}

configurations {
	// for dependencies that are needed for development only
	developmentOnly 
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut.aws:micronaut-function-aws-api-proxy:1.1.0.M2"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    developmentOnly "io.micronaut:micronaut-http-server-netty"
    compile "javax.annotation:javax.annotation-api"
    compile "io.micronaut:micronaut-http-client"
    runtime 'org.apache.logging.log4j:log4j-core:2.8.2'
    runtime 'org.apache.logging.log4j:log4j-api:2.8.2'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    runtime 'com.amazonaws:aws-lambda-java-log4j2:1.1.0'
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api:5.3.0"
    testCompile "io.micronaut.test:micronaut-test-junit5:1.0.2"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.0"
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "example.Application"
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
// use JUnit 5 platform
test {
    useJUnitPlatform()
}


task buildZip(type: Zip) {
  from compileJava
  from processResources
  into('lib') {
    from(configurations.compileClasspath)
  }
}
shadowJar.dependsOn buildZip
shadowDistZip.enabled=false
